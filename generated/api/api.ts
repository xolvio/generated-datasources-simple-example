/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import portableFetch from "portable-fetch";
import { Configuration } from "./configuration";
import { RESTDataSource } from "apollo-datasource-rest";
// {$CustomDataSourcePlaceholder}

type GenericObject<key, type> = {}

const BASE_PATH = "http://localhost:8090".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ListResource
 */
export interface ListResource {
    /**
     * 
     * @type {string}
     * @memberof ListResource
     */
    text: string;
}
/**
 * 
 * @export
 * @interface RenameResource
 */
export interface RenameResource {
    /**
     * 
     * @type {string}
     * @memberof RenameResource
     */
    text: string;
    /**
     * 
     * @type {string}
     * @memberof RenameResource
     */
    id: string;
}
/**
 * 
 * @export
 * @interface ToDoList
 */
export interface ToDoList {
    /**
     * 
     * @type {string}
     * @memberof ToDoList
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ToDoList
     */
    name: string;
    /**
     * 
     * @type {Date}
     * @memberof ToDoList
     */
    createdAt: Date;
}

export class Controllers {
        TodoListControllerApi: TodoListControllerApiApi

    constructor(...args) {
        this.TodoListControllerApi = new TodoListControllerApiApi(...args)
    }
    initialize(config) {
        this.TodoListControllerApi.initialize(config)
    }
}


export class TodoListControllerApiApi extends RESTDataSource {
    constructor(baseUrl?: string) {
        super();
        this.baseURL = baseUrl;
    }
    paramCreator = TodoListControllerApiFetchParamCreator()
    _delete(body: string, ): Promise<Response> {
        const args = this.paramCreator._delete(body, )

        // @ts-ignore
        return this.fetch(Object.assign(args.options, { path: args.url }))
    }
    createList(body: ListResource, ): Promise<ToDoList> {
        const args = this.paramCreator.createList(body, )

        // @ts-ignore
        return this.fetch(Object.assign(args.options, { path: args.url }))
    }
    getLists(): Promise<Array<ToDoList>> {
        const args = this.paramCreator.getLists()

        // @ts-ignore
        return this.fetch(Object.assign(args.options, { path: args.url }))
    }
    rename(body: RenameResource, ): Promise<ToDoList> {
        const args = this.paramCreator.rename(body, )

        // @ts-ignore
        return this.fetch(Object.assign(args.options, { path: args.url }))
    }
}


/**
 * TodoListControllerApi - fetch parameter creator
 * @export
 */
export const TodoListControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(body: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling _delete.');
            }
            const localVarPath = `/api/list`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ListResource} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createList(body: ListResource, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createList.');
            }
            const localVarPath = `/api/lists`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ListResource" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLists(options: any = {}): FetchArgs {
            const localVarPath = `/api/lists`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RenameResource} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rename(body: RenameResource, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling rename.');
            }
            const localVarPath = `/api/list/rename`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RenameResource" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodoListControllerApi - functional programming interface
 * @export
 */
export const TodoListControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(body: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TodoListControllerApiFetchParamCreator(configuration)._delete(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {ListResource} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createList(body: ListResource, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ToDoList> {
            const localVarFetchArgs = TodoListControllerApiFetchParamCreator(configuration).createList(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLists(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ToDoList>> {
            const localVarFetchArgs = TodoListControllerApiFetchParamCreator(configuration).getLists(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {RenameResource} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rename(body: RenameResource, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ToDoList> {
            const localVarFetchArgs = TodoListControllerApiFetchParamCreator(configuration).rename(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TodoListControllerApi - factory interface
 * @export
 */
export const TodoListControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(body: string, options?: any) {
            return TodoListControllerApiFp(configuration)._delete(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {ListResource} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createList(body: ListResource, options?: any) {
            return TodoListControllerApiFp(configuration).createList(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLists(options?: any) {
            return TodoListControllerApiFp(configuration).getLists(options)(fetch, basePath);
        },
        /**
         * 
         * @param {RenameResource} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rename(body: RenameResource, options?: any) {
            return TodoListControllerApiFp(configuration).rename(body, options)(fetch, basePath);
        },
    };
};

/**
 * TodoListControllerApi - object-oriented interface
 * @export
 * @class TodoListControllerApi
 * @extends {BaseAPI}
 */
export class TodoListControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoListControllerApi
     */
    public _delete(body: string, options?: any) {
        return TodoListControllerApiFp(this.configuration)._delete(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {ListResource} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoListControllerApi
     */
    public createList(body: ListResource, options?: any) {
        return TodoListControllerApiFp(this.configuration).createList(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoListControllerApi
     */
    public getLists(options?: any) {
        return TodoListControllerApiFp(this.configuration).getLists(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {RenameResource} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoListControllerApi
     */
    public rename(body: RenameResource, options?: any) {
        return TodoListControllerApiFp(this.configuration).rename(body, options)(this.fetch, this.basePath);
    }

}
